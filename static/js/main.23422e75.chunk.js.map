{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["AppConnected","connect","state","counter","increment","type","_ref","react_default","a","createElement","react","data-testid","className","App_MyButton","onPress","isEven","MyButton","_ref2","join","onClick","store","createStore","arguments","length","undefined","Object","objectSpread","window","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","match","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPA6BMA,EAAeC,YAJJ,SAACC,GAAD,MAAiB,CAChCC,QAASD,EAAMC,UAKf,CAAEC,UAVc,iBAAO,CACvBC,KAAM,eAOaJ,CAnBT,SAAAK,GAAsC,IAAnCH,EAAmCG,EAAnCH,QAASC,EAA0BE,EAA1BF,UACtB,OACEG,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,cAAY,UAAUC,UAAU,iBAClCT,GAEHI,EAAAC,EAAAC,cAACI,EAAD,CAAUC,QAASV,EAAWW,OAAQZ,EAAU,IAAM,OAuB/Ca,EAAW,SAAAC,GAAA,IAAGH,EAAHG,EAAGH,QAASC,EAAZE,EAAYF,OAAZ,OACtBR,EAAAC,EAAAC,cAAA,UACEE,cAAY,WACZC,UAAW,CAAC,cAAeG,EAAS,SAAW,QAAQG,KAAK,KAC5DC,QAASL,GAHX,cAmBIM,EAAQC,YAVE,WAAyC,IAAxCnB,EAAwCoB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhC,CAAEnB,QAAS,GAClC,MAAoB,eADmCmB,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC5CnB,KACFoB,OAAAC,EAAA,EAAAD,CAAA,GACFvB,EADL,CAEEC,QAASD,EAAMC,QAAU,IAGtBD,GAKPyB,OAAOC,8BAAgCD,OAAOC,gCCjD5BC,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cF0DD,kBACbF,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAUf,MAAOA,GACfb,EAAAC,EAAAC,cAACT,EAAD,QE5DY,MAASoC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.23422e75.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport \"./App.css\";\nimport { createStore } from \"redux\";\nimport { connect, Provider } from \"react-redux\";\n\ninterface AppProps {\n  counter: number;\n  increment: () => void;\n}\n\nconst App = ({ counter, increment }: AppProps) => {\n  return (\n    <Fragment>\n      <div data-testid=\"mylabel\" className=\"counter-label\">\n        {counter}\n      </div>\n      <MyButton onPress={increment} isEven={counter % 2 === 0} />\n    </Fragment>\n  );\n};\n\nconst increment = () => ({\n  type: \"INCREMENT\"\n});\n\nconst mapState = (state: any) => ({\n  counter: state.counter\n});\n\nconst AppConnected = connect(\n  mapState,\n  { increment }\n)(App);\n\ninterface Props {\n  onPress: () => void;\n  isEven: boolean;\n}\n\nexport const MyButton = ({ onPress, isEven }: Props) => (\n  <button\n    data-testid=\"mybutton\"\n    className={[\"main-button\", isEven ? \"yellow\" : \"blue\"].join(\" \")}\n    onClick={onPress}\n  >\n    Increment\n  </button>\n);\n\nconst reducer = (state = { counter: 0 }, action: any) => {\n  if (action.type === \"INCREMENT\") {\n    return {\n      ...state,\n      counter: state.counter + 1\n    };\n  }\n  return state;\n};\ndeclare var window: any;\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default () => (\n  <Provider store={store}>\n    <AppConnected />\n  </Provider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}